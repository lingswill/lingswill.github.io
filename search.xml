<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac使用brew安装MySQL</title>
    <url>/2021/03/24/20-12-46/</url>
    <content><![CDATA[<div class="note success"><p>brew 安装 MySQL </p>
</div>

<span id="more"></span>

<h2 id="查询MySQL"><a href="#查询MySQL" class="headerlink" title="查询MySQL"></a>查询MySQL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew search mysql</span><br><span class="line">==&gt; Formulae</span><br><span class="line">automysqlbackup           mysql-client@5.7          mysql@5.6</span><br><span class="line">mysql                     mysql-connector-c++       mysql@5.7</span><br><span class="line">mysql++                   mysql-sandbox             mysqltuner</span><br><span class="line">mysql-client              mysql-search-replace      qt-mysql</span><br><span class="line">==&gt; Casks</span><br><span class="line">mysql-connector-python    mysql-utilities           navicat-for-mysql</span><br><span class="line">mysql-shell               mysqlworkbench            sqlpro-for-mysql</span><br></pre></td></tr></table></figure>

<p>可以看到有很多版本，使用<code>brew info</code>命令可以查看信息。默认的mysql版本为5.8，我们选择安装更稳定的5.7</p>
<h2 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install mysql@5.7</span><br></pre></td></tr></table></figure>

<p>如果不慎安装了默认版本想要回退5.7版本，可以执行以下命令，（注意提前备份数据）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew uninstall mysql</span><br><span class="line">rm -rf /usr/local/var/mysql</span><br><span class="line">rm /usr/local/etc/my.cnf</span><br><span class="line">brew install mysql@5.7</span><br></pre></td></tr></table></figure>

<p>链接可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew link --force mysql@5.7</span><br></pre></td></tr></table></figure>

<p>添加环境变量至配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;/usr/local/opt/mysql@5.7/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><p>开机默认启动，执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew services start mysql@5.7</span><br></pre></td></tr></table></figure>

<p>或者一次启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure>

<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">//yes选项密码长度就必须设置为8位以上，no为6位</span><br><span class="line">Press y|Y for Yes, any other key for No: n</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">//设置密码</span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">//确认密码</span><br><span class="line">Re-enter new password:</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">//移除不用密码的用户</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">//是否接受root远程登录</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//删除test数据库</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础(一):字符串</title>
    <url>/2021/03/15/10-25-25/</url>
    <content><![CDATA[<div class="note info"><p>Python基础(一):字符串 </p>
</div>

<span id="more"></span>

<p>所谓<strong>字符串</strong>，就是<strong>由零个或多个字符组成的有限序列</strong>。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。字符串中的字符可以是特殊符号、英文字母、中文字符、日文的平假名或片假名、希腊字母、Emoji字符等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello,world!&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;你好，世界！&quot;</span></span><br><span class="line">print(s1, s2)</span><br><span class="line"><span class="comment"># 以三个引号或单引号开头的字符串可以折行</span></span><br><span class="line">s3 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(s3, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：<code>print</code>函数中的<code>end=&#39;&#39;</code>表示输出后不换行，即将默认的结束符<code>\n</code>（换行符）更换为<code>&#39;&#39;</code>（空字符） </p>
</blockquote>
<h2 id="转义字符和原始字符串"><a href="#转义字符和原始字符串" class="headerlink" title="转义字符和原始字符串"></a>转义字符和原始字符串</h2><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>&#39;</code>、<code>&quot;</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">print(s1)</span><br><span class="line">s2 = <span class="string">&#x27;\\hello, world!\\&#x27;</span></span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure>

<p>Python中的字符串可以<code>r</code>或<code>R</code>开头，这种字符串被称为原始字符串，意思是字符串中的每个字符都是它本来的含义，没有所谓的转义字符。例如，在字符串<code>&#39;hello\n&#39;</code>中，<code>\n</code>表示换行；而在<code>r&#39;hello\n&#39;</code>中，<code>\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串s1中\t是制表符，\n是换行符</span></span><br><span class="line">s1 = <span class="string">&#x27;\time up \now&#x27;</span></span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 字符串s2中没有转义字符，每个字符都是原始含义</span></span><br><span class="line">s2 = <span class="string">r&#x27;\time up \now&#x27;</span></span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure>

<h2 id="拼接和重复"><a href="#拼接和重复" class="headerlink" title="拼接和重复"></a>拼接和重复</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span></span><br><span class="line">print(s1)    <span class="comment"># hello world</span></span><br><span class="line">s2 = <span class="string">&#x27;!&#x27;</span> * <span class="number">3</span></span><br><span class="line">print(s2)    <span class="comment"># !!!</span></span><br><span class="line">s1 += s2     <span class="comment"># s1 = s1 + s2</span></span><br><span class="line">print(s1)    <span class="comment"># hello world!!!</span></span><br><span class="line">s1 *= <span class="number">2</span>      <span class="comment"># s1 = s1 * 2</span></span><br><span class="line">print(s1)    <span class="comment"># hello world!!!hello world!!!</span></span><br></pre></td></tr></table></figure>

<h2 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h2><p>对于两个字符串类型的变量，可以直接使用比较运算符比较两个字符串的相等性或大小。需要说明的是，因为字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>&#39;A&#39; &lt; &#39;a&#39;</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>，因为第一个字符都是<code>&#39;b&#39;</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>&#39;o&#39; &lt; &#39;a&#39;</code>的结果是<code>False</code>，所以<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>的结果也是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，例如<code>ord(&#39;A&#39;)</code>的值是<code>65</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;a whole new world&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(s1 == s2, s1 &lt; s2)      <span class="comment"># False True</span></span><br><span class="line">print(s2 == <span class="string">&#x27;hello world&#x27;</span>)    <span class="comment"># True</span></span><br><span class="line">print(s2 == <span class="string">&#x27;Hello world&#x27;</span>)    <span class="comment"># False</span></span><br><span class="line">print(s2 != <span class="string">&#x27;Hello world&#x27;</span>)    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p><em>字符串的比较运算比较的是字符串的内容</em>，Python中还有一个<code>is</code>运算符（身份运算符），如果用<code>is</code>来比较两个字符串，它比较的是两个变量对应的字符串是否在内存中相同的位置（内存地址），简单的说就是两个变量是否对应内存中的同一个字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">s3 = s2</span><br><span class="line"><span class="comment"># 比较字符串的内容</span></span><br><span class="line">print(s1 == s2, s2 == s3)    <span class="comment"># True True</span></span><br><span class="line"><span class="comment"># 比较字符串的内存地址</span></span><br><span class="line">print(s1 <span class="keyword">is</span> s2, s2 <span class="keyword">is</span> s3)    <span class="comment"># False True</span></span><br></pre></td></tr></table></figure>

<h2 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h2><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串中是否存在另外一个字符或字符串，<code>in</code>和<code>not in</code>运算通常称为成员运算，会产生布尔值<code>True</code>或<code>False</code>，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;wo&#x27;</span> <span class="keyword">in</span> s1)    <span class="comment"># True</span></span><br><span class="line">s2 = <span class="string">&#x27;goodbye&#x27;</span></span><br><span class="line">print(s2 <span class="keyword">in</span> s1)      <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><p>获取字符串长度没有直接的运算符，而是使用内置函数<code>len</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">print(<span class="built_in">len</span>(s))                  <span class="comment"># 12</span></span><br><span class="line">print(<span class="built_in">len</span>(<span class="string">&#x27;goodbye, world&#x27;</span>))    <span class="comment"># 14</span></span><br></pre></td></tr></table></figure>

<h2 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h2><p>如果希望从字符串中取出某个字符，可以对字符串进行索引运算，运算符是<code>[n]</code>，其中<code>n</code>是一个整数，假设字符串的长度为<code>N</code>，那么<code>n</code>可以是从<code>0</code>到<code>N-1</code>的整数，其中<code>0</code>是字符串中第一个字符的索引，而<code>N-1</code>是字符串中最后一个字符的索引，通常称之为正向索引；在Python中，字符串的索引也可以是从<code>-1</code>到<code>-N</code>的整数，其中<code>-1</code>是最后一个字符的索引，而<code>-N</code>则是第一个字符的索引，通常称之为负向索引。注意，因为<strong>字符串是不可变类型</strong>，所以<strong>不能通过索引运算修改字符串中的字符</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line">N = <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个字符</span></span><br><span class="line">print(s[<span class="number">0</span>], s[-N])    <span class="comment"># a a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最后一个字符</span></span><br><span class="line">print(s[N-<span class="number">1</span>], s[-<span class="number">1</span>])  <span class="comment"># 6 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引为2或-7的字符</span></span><br><span class="line">print(s[<span class="number">2</span>], s[-<span class="number">7</span>])    <span class="comment"># c c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引为5和-4的字符</span></span><br><span class="line">print(s[<span class="number">5</span>], s[-<span class="number">4</span>])    <span class="comment"># 3 3</span></span><br></pre></td></tr></table></figure>

<p>如果要从字符串中取出多个字符，可以对字符串进行切片，运算符是<code>[i:j:k]</code>，其中<code>i</code>是开始索引，索引对应的字符可以取到；<code>j</code>是结束索引，索引对应的字符不能取到；<code>k</code>是步长，默认值为<code>1</code>，表示从前向后获取相邻字符的连续切片，所以<code>:k</code>部分可以省略。假设字符串的长度为<code>N</code>，当<code>k &gt; 0</code>时表示正向切片（从前向后获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>0</code>，<code>j</code>的默认值是<code>N</code>；当<code>k &lt; 0</code>时表示负向切片（从后向前获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>-1</code>，j的默认值是<code>-N - 1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=2, j=5, k=1的正向切片操作</span></span><br><span class="line">print(s[<span class="number">2</span>:<span class="number">5</span>])       <span class="comment"># c12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-7, j=-4, k=1的正向切片操作</span></span><br><span class="line">print(s[-<span class="number">7</span>:-<span class="number">4</span>])     <span class="comment"># c12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=2, j=9, k=1的正向切片操作</span></span><br><span class="line">print(s[<span class="number">2</span>:])        <span class="comment"># c123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-7, j=9, k=1的正向切片操作</span></span><br><span class="line">print(s[-<span class="number">7</span>:])       <span class="comment"># c123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=2, j=9, k=2的正向切片操作</span></span><br><span class="line">print(s[<span class="number">2</span>::<span class="number">2</span>])      <span class="comment"># c246</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-7, j=9, k=2的正向切片操作</span></span><br><span class="line">print(s[-<span class="number">7</span>::<span class="number">2</span>])     <span class="comment"># c246</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=0, j=9, k=2的正向切片操作</span></span><br><span class="line">print(s[::<span class="number">2</span>])       <span class="comment"># ac246</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=1, j=-1, k=2的正向切片操作</span></span><br><span class="line">print(s[<span class="number">1</span>:-<span class="number">1</span>:<span class="number">2</span>])    <span class="comment"># b135</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=7, j=1, k=-1的负向切片操作</span></span><br><span class="line">print(s[<span class="number">7</span>:<span class="number">1</span>:-<span class="number">1</span>])    <span class="comment"># 54321c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-2, j=-8, k=-1的负向切片操作</span></span><br><span class="line">print(s[-<span class="number">2</span>:-<span class="number">8</span>:-<span class="number">1</span>])  <span class="comment"># 54321c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=7, j=-10, k=-1的负向切片操作</span></span><br><span class="line">print(s[<span class="number">7</span>::-<span class="number">1</span>])     <span class="comment"># 54321cba</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-1, j=1, k=-1的负向切片操作</span></span><br><span class="line">print(s[:<span class="number">1</span>:-<span class="number">1</span>])     <span class="comment"># 654321c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=0, j=9, k=1的正向切片</span></span><br><span class="line">print(s[:])         <span class="comment"># abc123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=0, j=9, k=2的正向切片</span></span><br><span class="line">print(s[::<span class="number">2</span>])       <span class="comment"># ac246</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-1, j=-10, k=-1的负向切片</span></span><br><span class="line">print(s[::-<span class="number">1</span>])      <span class="comment"># 654321cba</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i=-1, j=-10, k=-2的负向切片</span></span><br><span class="line">print(s[::-<span class="number">2</span>])      <span class="comment"># 642ca</span></span><br></pre></td></tr></table></figure>

<h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><p>如果希望从字符串中取出每个字符，可以使用<code>for</code>循环对字符串进行遍历，有两种方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">    print(s1[index])</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s1:</span><br><span class="line">    print(ch)</span><br></pre></td></tr></table></figure>

<h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><p>在Python中，可以通过字符串类型自带的方法对字符串进行操作和处理，对于一个字符串类型的变量，可以用<code>变量名.方法名()</code>的方式来调用它的方法。</p>
<h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用capitalize方法获得字符串首字母大写后的字符串</span></span><br><span class="line">print(s1.capitalize())   <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 使用title方法获得字符串每个单词首字母大写后的字符串</span></span><br><span class="line">print(s1.title())        <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 使用upper方法获得字符串大写后的字符串</span></span><br><span class="line">print(s1.upper())        <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;GOODBYE&#x27;</span></span><br><span class="line"><span class="comment"># 使用lower方法获得字符串小写后的字符串</span></span><br><span class="line">print(s2.lower())        <span class="comment"># goodbye</span></span><br></pre></td></tr></table></figure>

<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>如果想在一个字符串中从前向后查找有没有另外一个字符串，可以使用字符串的<code>find</code>或<code>index</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find方法从字符串中查找另一个字符串所在的位置</span></span><br><span class="line"><span class="comment"># 找到了返回字符串中另一个字符串首字符的索引</span></span><br><span class="line">print(s.find(<span class="string">&#x27;or&#x27;</span>))        <span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 找不到返回-1</span></span><br><span class="line">print(s.find(<span class="string">&#x27;shit&#x27;</span>))      <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># index方法与find方法类似</span></span><br><span class="line"><span class="comment"># 找到了返回字符串中另一个字符串首字符的索引</span></span><br><span class="line">print(s.index(<span class="string">&#x27;or&#x27;</span>))       <span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 找不到引发异常</span></span><br><span class="line">print(s.index(<span class="string">&#x27;shit&#x27;</span>))     <span class="comment"># ValueError: substring not found</span></span><br></pre></td></tr></table></figure>

<p>在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，也就是查找不必从索引为<code>0</code>的位置开始。<code>find</code>和<code>index</code>方法还有逆向查找（从后向前查找）的版本，分别是<code>rfind</code>和<code>rindex</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello good world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前向后查找字符o出现的位置(相当于第一次出现)</span></span><br><span class="line">print(s.find(<span class="string">&#x27;o&#x27;</span>))       <span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 从索引为5的位置开始查找字符o出现的位置</span></span><br><span class="line">print(s.find(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>))    <span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 从后向前查找字符o出现的位置(相当于最后一次出现)</span></span><br><span class="line">print(s.rfind(<span class="string">&#x27;o&#x27;</span>))      <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>

<h3 id="性质判断"><a href="#性质判断" class="headerlink" title="性质判断"></a>性质判断</h3><p>可以通过字符串的<code>startswith</code>、<code>endswith</code>来判断字符串是否以某个字符串开头和结尾；还可以用<code>is</code>开头的方法判断字符串的特征，这些方法都返回布尔值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startwith方法检查字符串是否以指定的字符串开头返回布尔值</span></span><br><span class="line">print(s1.startswith(<span class="string">&#x27;He&#x27;</span>))    <span class="comment"># False</span></span><br><span class="line">print(s1.startswith(<span class="string">&#x27;hel&#x27;</span>))   <span class="comment"># True</span></span><br><span class="line"><span class="comment"># endswith方法检查字符串是否以指定的字符串结尾返回布尔值</span></span><br><span class="line">print(s1.endswith(<span class="string">&#x27;!&#x27;</span>))       <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigit方法检查字符串是否由数字构成返回布尔值</span></span><br><span class="line">print(s2.isdigit())    <span class="comment"># False</span></span><br><span class="line"><span class="comment"># isalpha方法检查字符串是否以字母构成返回布尔值</span></span><br><span class="line">print(s2.isalpha())    <span class="comment"># False</span></span><br><span class="line"><span class="comment"># isalnum方法检查字符串是否以数字和字母构成返回布尔值</span></span><br><span class="line">print(s2.isalnum())    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>在Python中，字符串类型可以通过<code>center</code>、<code>ljust</code>、<code>rjust</code>方法做居中、左对齐和右对齐的处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># center方法以宽度20将字符串居中并在两侧填充*</span></span><br><span class="line">print(s.center(<span class="number">20</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># ****hello, world****</span></span><br><span class="line"><span class="comment"># rjust方法以宽度20将字符串右对齐并在左侧填充空格</span></span><br><span class="line">print(s.rjust(<span class="number">20</span>))        <span class="comment">#         hello, world</span></span><br><span class="line"><span class="comment"># ljust方法以宽度20将字符串左对齐并在右侧填充~</span></span><br><span class="line">print(s.ljust(<span class="number">20</span>, <span class="string">&#x27;~&#x27;</span>))   <span class="comment"># hello, world~~~~~~~~</span></span><br></pre></td></tr></table></figure>

<p>在用<code>print</code>函数输出字符串时，可以用下面的方式对字符串进行格式化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">print(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br></pre></td></tr></table></figure>

<p>也可以用字符串的方法来完成字符串的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">print(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br></pre></td></tr></table></figure>

<p>从Python 3.6开始，格式化字符串还有更为简洁的书写方式，就是在字符串前加上<code>f</code>来格式化字符串，在这种以<code>f</code>打头的字符串中，<code>&#123;变量名&#125;</code>是一个占位符，会被变量对应的值将其替换掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p>
<table>
<thead>
<tr>
<th>变量值</th>
<th>占位符</th>
<th>格式化结果</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>3.1415926</code></td>
<td><code>&#123;:.2f&#125;</code></td>
<td><code>&#39;3.14&#39;</code></td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td><code>3.1415926</code></td>
<td><code>&#123;:+.2f&#125;</code></td>
<td><code>&#39;+3.14&#39;</code></td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td><code>-1</code></td>
<td><code>&#123;:+.2f&#125;</code></td>
<td><code>&#39;-1.00&#39;</code></td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td><code>3.1415926</code></td>
<td><code>&#123;:.0f&#125;</code></td>
<td><code>&#39;3&#39;</code></td>
<td>不带小数</td>
</tr>
<tr>
<td><code>123</code></td>
<td><code>&#123;:0&gt;10d&#125;</code></td>
<td><code>0000000123</code></td>
<td>左边补<code>0</code>，补够10位</td>
</tr>
<tr>
<td><code>123</code></td>
<td><code>&#123;:x&lt;10d&#125;</code></td>
<td><code>123xxxxxxx</code></td>
<td>右边补<code>x</code> ，补够10位</td>
</tr>
<tr>
<td><code>123</code></td>
<td><code>&#123;:&gt;10d&#125;</code></td>
<td><code>&#39;       123&#39;</code></td>
<td>左边补空格，补够10位</td>
</tr>
<tr>
<td><code>123</code></td>
<td><code>&#123;:&lt;10d&#125;</code></td>
<td><code>&#39;123       &#39;</code></td>
<td>右边补空格，补够10位</td>
</tr>
<tr>
<td><code>123456789</code></td>
<td><code>&#123;:,&#125;</code></td>
<td><code>&#39;123,456,789&#39;</code></td>
<td>逗号分隔格式</td>
</tr>
<tr>
<td><code>0.123</code></td>
<td><code>&#123;:.2%&#125;</code></td>
<td><code>&#39;12.30%&#39;</code></td>
<td>百分比格式</td>
</tr>
<tr>
<td><code>123456789</code></td>
<td><code>&#123;:.2e&#125;</code></td>
<td><code>&#39;1.23e+08&#39;</code></td>
<td>科学计数法格式</td>
</tr>
</tbody></table>
<h3 id="修剪"><a href="#修剪" class="headerlink" title="修剪"></a>修剪</h3><p>字符串的<code>strip</code>方法可以帮我们获得将原字符串修剪掉左右两端空格之后的字符串。这个方法非常有实用价值，通常用来将用户输入中因为不小心键入的头尾空格去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;   xxxxxx@163.com  \t\r\n&#x27;</span></span><br><span class="line"><span class="comment"># strip方法获得字符串修剪左右两侧空格之后的字符串</span></span><br><span class="line">print(s.strip())    <span class="comment"># xxxxxx@163.com</span></span><br></pre></td></tr></table></figure>

<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p><code>replace</code>方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;this is string&#x27;</span></span><br><span class="line">print(s1.replace(<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;was&#x27;</span>))    <span class="comment"># thwas was string</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础(三):元组</title>
    <url>/2021/03/16/15-26-16/</url>
    <content><![CDATA[<div class="note success"><p>Python基础(三):元组 </p>
</div>

<span id="more"></span>

<p>在Python中，元组也是多个元素按照一定的顺序构成的序列。元组和列表的不同之处在于，元组是不可变类型，这就意味着元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能进行修改。定义元组通常使用<code>()</code>字面量语法，元组类型支持的运算符跟列表是一样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个三元组</span></span><br><span class="line">t1 = (<span class="number">30</span>, <span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 定义一个四元组</span></span><br><span class="line">t2 = (<span class="string">&#x27;浙江&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>, <span class="string">&#x27;阿里巴巴&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看变量的类型</span></span><br><span class="line">print(<span class="built_in">type</span>(t1), <span class="built_in">type</span>(t2))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; &lt;class &#x27;tuple&#x27;&gt; </span></span><br><span class="line"><span class="comment"># 查看元组中元素的数量</span></span><br><span class="line">print(<span class="built_in">len</span>(t1), <span class="built_in">len</span>(t2))    <span class="comment"># 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引运算获取元组中的元素</span></span><br><span class="line">print(t1[<span class="number">0</span>], t1[-<span class="number">3</span>])    <span class="comment"># 30 30</span></span><br><span class="line">print(t2[<span class="number">3</span>], t2[-<span class="number">1</span>])    <span class="comment"># 阿里巴巴 阿里巴巴</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历元组中的元素</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> t2:</span><br><span class="line">    print(member)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员运算</span></span><br><span class="line">print(<span class="number">100</span> <span class="keyword">in</span> t1)    <span class="comment"># False</span></span><br><span class="line">print(<span class="number">66</span> <span class="keyword">in</span> t2)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">t3 = t1 + t2</span><br><span class="line">print(t3)           <span class="comment"># (30, 10, 50, &#x27;浙江&#x27;, 66, True, &#x27;阿里巴巴&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">print(t3[::<span class="number">2</span>])      <span class="comment"># (30, 50, 66, &#x27;阿里巴巴&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line">print(t1 == t3)    <span class="comment"># False</span></span><br><span class="line">print(t1 &gt;= t3)    <span class="comment"># False</span></span><br><span class="line">print(t1 &lt; (<span class="number">30</span>, <span class="number">11</span>, <span class="number">55</span>))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>一个元组中如果有两个元素，就称之为二元组；一个元组中如果五个元素，就称之为五元组。需要注意的是，**<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号**，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">a = ()</span><br><span class="line">print(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 不是元组</span></span><br><span class="line">b = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">c = (<span class="number">100</span>)</span><br><span class="line">print(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 一元组</span></span><br><span class="line">d = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line">print(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">e = (<span class="number">100</span>, )</span><br><span class="line">print(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元组的应用场景"><a href="#元组的应用场景" class="headerlink" title="元组的应用场景"></a>元组的应用场景</h2><h3 id="打包和解包操作"><a href="#打包和解包操作" class="headerlink" title="打包和解包操作"></a>打包和解包操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span></span><br><span class="line">print(<span class="built_in">type</span>(a), a)    <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (1, 10, 100)</span></span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">i, j, k = a</span><br><span class="line">print(i, j, k)       <span class="comment"># 1 10 100</span></span><br></pre></td></tr></table></figure>

<p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, k = a             <span class="comment"># ValueError: too many values to unpack (expected 3)</span></span><br><span class="line">i, j, k, l, m, n = a    <span class="comment"># ValueError: not enough values to unpack (expected 6, got 4)</span></span><br></pre></td></tr></table></figure>

<p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式，有了星号表达式，就可以让一个变量接收多个值。需要注意的是，<strong>用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素</strong>。还有在解包语法中，<strong>星号表达式只能出现一次</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, *k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># 1 10 [100, 1000]</span></span><br><span class="line">i, *j, k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># 1 [10, 100] 1000</span></span><br><span class="line">*i, j, k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># [1, 10] 100 1000</span></span><br><span class="line">*i, j = a</span><br><span class="line">print(i, j)             <span class="comment"># [1, 10, 100] 1000</span></span><br><span class="line">i, *j = a</span><br><span class="line">print(i, j)             <span class="comment"># 1 [10, 100, 1000]</span></span><br><span class="line">i, j, k, *l = a</span><br><span class="line">print(i, j, k, l)       <span class="comment"># 1 10 100 [1000]</span></span><br><span class="line">i, j, k, l, *m = a</span><br><span class="line">print(i, j, k, l, m)    <span class="comment"># 1 10 100 1000 []</span></span><br></pre></td></tr></table></figure>

<p><strong>解包语法对所有的序列都成立</strong>，这就意味着对字符串、列表以及<code>range</code>函数返回的范围序列都可以使用解包语法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, *c = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(a, b, c)    <span class="comment"># 1 2 [3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">a, b, c = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line">print(a, b, c)    <span class="comment"># 1 10 100</span></span><br><span class="line">a, *b, c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(a, b, c)    <span class="comment"># h [&#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;] o</span></span><br></pre></td></tr></table></figure>

<h3 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h3><p>如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>赋给<code>a</code>，<code>c</code>赋给<code>b</code>，<code>a</code>赋给<code>c</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = b, c, a</span><br></pre></td></tr></table></figure>

<h3 id="让函数返回多个值"><a href="#让函数返回多个值" class="headerlink" title="让函数返回多个值"></a>让函数返回多个值</h3><p>有的时候一个函数执行完成后可能需要返回多个值，这个时候元组类型应该是比较方便的选择。例如，编写一个找出列表中最大值和最小的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max_and_min</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出列表中最大和最小的元素</span></span><br><span class="line"><span class="string">    :param items: 列表</span></span><br><span class="line"><span class="string">    :return: 最大和最小元素构成的二元组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_one, min_one = items[<span class="number">0</span>], items[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item &gt; max_one:</span><br><span class="line">            max_one = item</span><br><span class="line">        <span class="keyword">elif</span> item &lt; min_one:</span><br><span class="line">            min_one = item</span><br><span class="line">    <span class="keyword">return</span> max_one, min_one</span><br></pre></td></tr></table></figure>

<p>上面函数的<code>return</code>语句中有两个值，这两个值会组装成一个二元组然后返回。所以调用<code>find_max_and_min</code>函数会得到这个二元组，如果愿意也可以通过解包语法将二元组中的两个值分别赋给两个变量。</p>
<h2 id="元组和列表的比较"><a href="#元组和列表的比较" class="headerlink" title="元组和列表的比较"></a>元组和列表的比较</h2><ol>
<li>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。</li>
<li>元组是不可变类型，通常<strong>不可变类型在创建时间和占用空间上面都优于对应的可变类型</strong>。</li>
<li>Python中的元组和列表是可以相互转换的</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>元组</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础(二):列表</title>
    <url>/2021/03/16/12-25-59/</url>
    <content><![CDATA[<div class="note primary"><p>Python基础(二):列表 </p>
</div>

<span id="more"></span>

<p>在Python中，<strong>列表是由一系元素按特定顺序构成的数据序列</strong>，这样就意味着定义一个列表类型的变量，<strong>可以保存多个数据</strong>，而且<strong>允许有重复的数据</strong>。可以使用<code>[]</code>字面量语法来定义列表，列表中的多个元素用逗号进行分隔。</p>
<p>列表是一种<strong>可变数据类型</strong>，也就是说列表可以添加元素、删除元素、更新元素。</p>
<h2 id="列表的运算符"><a href="#列表的运算符" class="headerlink" title="列表的运算符"></a>列表的运算符</h2><p>和字符串类型一样，列表也支持拼接、重复、成员运算、索引和切片以及比较运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items1 = [<span class="number">35</span>, <span class="number">12</span>, <span class="number">99</span>, <span class="number">68</span>, <span class="number">55</span>, <span class="number">87</span>]</span><br><span class="line">items2 = [<span class="number">45</span>, <span class="number">8</span>, <span class="number">29</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的拼接</span></span><br><span class="line">items3 = items1 + items2</span><br><span class="line">print(items3)    <span class="comment"># [35, 12, 99, 68, 55, 87, 45, 8, 29]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的重复</span></span><br><span class="line">items4 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line">print(items4)    <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的成员运算</span></span><br><span class="line">print(<span class="number">100</span> <span class="keyword">in</span> items3)        <span class="comment"># False</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> items4)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表的长度(元素个数)</span></span><br><span class="line">size = <span class="built_in">len</span>(items3)</span><br><span class="line">print(size)                 <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的索引</span></span><br><span class="line">print(items3[<span class="number">0</span>], items3[-size])        <span class="comment"># 35 35</span></span><br><span class="line">items3[-<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">print(items3[size - <span class="number">1</span>], items3[-<span class="number">1</span>])    <span class="comment"># 100 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的切片</span></span><br><span class="line">print(items3[:<span class="number">5</span>])          <span class="comment"># [35, 12, 99, 68, 55]</span></span><br><span class="line">print(items3[<span class="number">4</span>:])          <span class="comment"># [55, 87, 45, 8, 100]</span></span><br><span class="line">print(items3[-<span class="number">5</span>:-<span class="number">7</span>:-<span class="number">1</span>])    <span class="comment"># [55, 68]</span></span><br><span class="line">print(items3[::-<span class="number">2</span>])        <span class="comment"># [100, 45, 55, 99, 35]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的比较运算</span></span><br><span class="line">items5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">items6 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span></span><br><span class="line">print(items5 == items6)    <span class="comment"># True</span></span><br><span class="line">items7 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 两个列表比较大小比的是对应索引位置上的元素的大小</span></span><br><span class="line">print(items5 &lt;= items7)    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表元素的遍历"><a href="#列表元素的遍历" class="headerlink" title="列表元素的遍历"></a>列表元素的遍历</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):</span><br><span class="line">    print(items[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用append方法在列表尾部添加元素</span></span><br><span class="line">items.append(<span class="string">&#x27;Swift&#x27;</span>)</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line"><span class="comment"># 使用insert方法在列表指定索引位置插入元素</span></span><br><span class="line">items.insert(<span class="number">2</span>, <span class="string">&#x27;SQL&#x27;</span>)</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的元素</span></span><br><span class="line">items.remove(<span class="string">&#x27;Java&#x27;</span>)</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Python&#x27;, &#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line"><span class="comment"># 删除指定索引位置的元素</span></span><br><span class="line">items.pop(<span class="number">0</span>)</span><br><span class="line">items.pop(<span class="built_in">len</span>(items) - <span class="number">1</span>)</span><br><span class="line">print(items)    <span class="comment"># [&#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空列表中的元素</span></span><br><span class="line">items.clear()</span><br><span class="line">print(items)    <span class="comment"># []</span></span><br></pre></td></tr></table></figure>

<p>在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引发<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p>
<p>从列表中删除元素其实还有一种方式，就是使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优（<code>del</code>对应字节码指令是<code>DELETE_SUBSCR</code>，而<code>pop</code>对应的字节码指令是<code>CALL_METHOD</code>和<code>POP_TOP</code>）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> items[<span class="number">1</span>]</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Python&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="元素位置和次数"><a href="#元素位置和次数" class="headerlink" title="元素位置和次数"></a>元素位置和次数</h2><p>列表类型的<code>index</code>方法可以查找某个元素在列表中的索引位置；因为列表中允许有重复的元素，所以列表类型提供了<code>count</code>方法来统计一个元素在列表中出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素的索引位置</span></span><br><span class="line">print(items.index(<span class="string">&#x27;Python&#x27;</span>))       <span class="comment"># 0</span></span><br><span class="line">print(items.index(<span class="string">&#x27;Python&#x27;</span>, <span class="number">2</span>))    <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 注意：虽然列表中有&#x27;Java&#x27;，但是从索引为3这个位置开始后面是没有&#x27;Java&#x27;的</span></span><br><span class="line">print(items.index(<span class="string">&#x27;Java&#x27;</span>, <span class="number">3</span>))      <span class="comment"># ValueError: &#x27;Java&#x27; is not in list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找元素出现的次数</span></span><br><span class="line">print(items.count(<span class="string">&#x27;Python&#x27;</span>))    <span class="comment"># 2</span></span><br><span class="line">print(items.count(<span class="string">&#x27;Go&#x27;</span>))        <span class="comment"># 1</span></span><br><span class="line">print(items.count(<span class="string">&#x27;Swfit&#x27;</span>))     <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<h2 id="元素排序和反转"><a href="#元素排序和反转" class="headerlink" title="元素排序和反转"></a>元素排序和反转</h2><p>列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reverse</code>操作可以实现元素的反转。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">items.sort()</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Go&#x27;, &#x27;Java&#x27;, &#x27;Kotlin&#x27;, &#x27;Python&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"><span class="comment"># 反转</span></span><br><span class="line">items.reverse()</span><br><span class="line">print(items)    <span class="comment"># [&#x27;Python&#x27;, &#x27;Python&#x27;, &#x27;Kotlin&#x27;, &#x27;Java&#x27;, &#x27;Go&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的生成式"><a href="#列表的生成式" class="headerlink" title="列表的生成式"></a>列表的生成式</h2><p>在Python中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。</p>
<p>通过<code>for</code>循坏向空列表添加元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">items1 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    items1.append(x)</span><br><span class="line">print(items1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">items2 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>:</span><br><span class="line">        items2.append(x + y)</span><br><span class="line">print(items2)</span><br></pre></td></tr></table></figure>

<p>通过生成式创建列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">items1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">print(items1)    <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">items3 = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line">print(items3)    <span class="comment"># [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套的列表"><a href="#嵌套的列表" class="headerlink" title="嵌套的列表"></a>嵌套的列表</h2><p>Python语言没有限定列表中的元素必须是相同的数据类型，也就是说一个列表中的元素可以任意的数据类型，当然也包括列表。如果列表中的元素又是列表，那么我们可以称之为嵌套的列表。</p>
<p>例如：我们想保存5个学生3门课程的成绩，可以定义一个保存5个元素的列表保存5个学生的信息，而每个列表元素又是3个元素构成的列表，分别代表3门课程的成绩。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">print(scores)    <span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础(五):字典</title>
    <url>/2021/03/18/13-26-50/</url>
    <content><![CDATA[<div class="note danger"><p>Python基础(五):字典 </p>
</div>

<span id="more"></span>


<p>Python程序中的字典跟现实生活中的字典很像，它以键值对（键和值的组合）的方式把数据组织到一起，我们可以通过键找到与之对应的值并进行操作。就像《新华字典》中，每个字（键）都有与它对应的解释（值）一样，每个字和它的解释合在一起就是字典中的一个条目，而字典中通常包含了很多个这样的条目。</p>
<h2 id="创建和使用字典"><a href="#创建和使用字典" class="headerlink" title="创建和使用字典"></a>创建和使用字典</h2><p>在Python中创建字典可以使用<code>&#123;&#125;</code>字面量语法，这一点跟上一节课讲的集合是一样的。但是字典的<code>&#123;&#125;</code>中的元素是以键值对的形式存在的，每个元素由<code>:</code>分隔的两个值构成，<code>:</code>前面是键，<code>:</code>后面是值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinhua = &#123;</span><br><span class="line">    <span class="string">&#x27;麓&#x27;</span>: <span class="string">&#x27;山脚下&#x27;</span>, <span class="string">&#x27;路&#x27;</span>: <span class="string">&#x27;道，往来通行的地方；方面，地区：南～货，外～货；种类：他俩是一～人&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;蕗&#x27;</span>: <span class="string">&#x27;甘草的别名&#x27;</span>, <span class="string">&#x27;潞&#x27;</span>: <span class="string">&#x27;潞水，水名，即今山西省的浊漳河；潞江，水名，即云南省的怒江&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">print(xinhua)</span><br></pre></td></tr></table></figure>

<p>也可以使用内置函数<code>dict</code>或者是字典的生成式语法来创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict函数(构造器)中的每一组参数就是字典中的一组键值对</span></span><br><span class="line">person = <span class="built_in">dict</span>(name=<span class="string">&#x27;jodan&#x27;</span>, age=<span class="number">23</span>, team=<span class="string">&#x27;芝加哥公牛&#x27;</span>)</span><br><span class="line">print(person)    <span class="comment"># &#123;&#x27;name&#x27;: &#x27;jodan&#x27;, &#x27;age&#x27;: 23, &#x27;team&#x27;: &#x27;芝加哥公牛&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过Python内置函数zip压缩两个序列并创建字典</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="string">&#x27;12345&#x27;</span>))</span><br><span class="line">print(items1)    <span class="comment"># &#123;&#x27;A&#x27;: &#x27;1&#x27;, &#x27;B&#x27;: &#x27;2&#x27;, &#x27;C&#x27;: &#x27;3&#x27;, &#x27;D&#x27;: &#x27;4&#x27;, &#x27;E&#x27;: &#x27;5&#x27;&#125;</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)))</span><br><span class="line">print(items2)    <span class="comment"># &#123;&#x27;A&#x27;: 1, &#x27;B&#x27;: 2, &#x27;C&#x27;: 3, &#x27;D&#x27;: 4, &#x27;E&#x27;: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用字典生成式语法创建字典</span></span><br><span class="line">items3 = &#123;x: x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)&#125;</span><br><span class="line">print(items3)     <span class="comment"># &#123;1: 1, 2: 8, 3: 27, 4: 64, 5: 125&#125;</span></span><br></pre></td></tr></table></figure>

<p>想知道字典中一共有多少组键值对，仍然是使用<code>len</code>函数；如果想对字典进行遍历，可以用<code>for</code>循环，但是需要注意，<code>for</code>循环只是对字典的键进行了遍历。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = <span class="built_in">dict</span>(name=<span class="string">&#x27;jodan&#x27;</span>, age=<span class="number">23</span>, team=<span class="string">&#x27;芝加哥公牛&#x27;</span>)</span><br><span class="line">print(<span class="built_in">len</span>(person))    <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> person:</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure>

<h2 id="字典的运算"><a href="#字典的运算" class="headerlink" title="字典的运算"></a>字典的运算</h2><p>对于字典类型来说，成员运算和索引运算肯定是最为重要的，前者可以判定指定的键在不在字典中，后者可以通过键获取对应的值或者向字典中加入新的键值对。值得注意的是，字典的索引不同于列表的索引，列表中的元素因为有属于自己有序号，所以列表的索引是一个整数；字典中因为保存的是键值对，所以字典的索引是键值对中的键，通过索引操作可以修改原来的值或者向字典中存入新的键值对。需要<strong>特别注意</strong>的是，<strong>字典中的键必须是不可变类型</strong>，例如整数（<code>int</code>）、浮点数（<code>float</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等类型的值；显然，列表（<code>list</code>）和集合（<code>set</code>）是不能作为字典中的键的，当然字典类型本身也不能再作为字典中的键，因为字典也是可变类型，但是字典可以作为字典中的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = <span class="built_in">dict</span>(name=<span class="string">&#x27;jodan&#x27;</span>, age=<span class="number">23</span>, team=<span class="string">&#x27;芝加哥公牛&#x27;</span>)</span><br><span class="line"><span class="comment"># 检查name和tel两个键在不在person字典中</span></span><br><span class="line">print(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person, <span class="string">&#x27;point&#x27;</span> <span class="keyword">in</span> person)  <span class="comment"># True False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过age修将person字典中对应的值修改为30</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person:</span><br><span class="line">    person[<span class="string">&#x27;age&#x27;</span>] = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引操作向person字典中存入新的键值对</span></span><br><span class="line">person[<span class="string">&#x27;point&#x27;</span>] = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;point&#x27;</span> <span class="keyword">in</span> person)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查person字典中键值对的数量</span></span><br><span class="line">print(<span class="built_in">len</span>(person))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典的键进行循环并通索引运算获取键对应的值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> person:</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> -&gt; <span class="subst">&#123;person[key]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典中的值又是一个字典(嵌套的字典)</span></span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="number">1001</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;狄仁杰&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;place&#x27;</span>: <span class="string">&#x27;山西大同&#x27;</span>&#125;,</span><br><span class="line">    <span class="number">1002</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;白元芳&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;place&#x27;</span>: <span class="string">&#x27;河北保定&#x27;</span>&#125;,</span><br><span class="line">    <span class="number">1003</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;武则天&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;place&#x27;</span>: <span class="string">&#x27;四川广元&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用get方法通过键获取对应的值，如果取不到不会引发KeyError异常而是返回None或设定的默认值</span></span><br><span class="line">print(students.get(<span class="number">1002</span>))    <span class="comment"># &#123;&#x27;name&#x27;: &#x27;白元芳&#x27;, &#x27;sex&#x27;: True, &#x27;age&#x27;: 23, &#x27;place&#x27;: &#x27;河北保定&#x27;&#125;</span></span><br><span class="line">print(students.get(<span class="number">1005</span>))    <span class="comment"># None</span></span><br><span class="line">print(students.get(<span class="number">1005</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;无名氏&#x27;</span>&#125;))    <span class="comment"># &#123;&#x27;name&#x27;: &#x27;无名氏&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的键</span></span><br><span class="line">print(students.keys())      <span class="comment"># dict_keys([1001, 1002, 1003])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的值</span></span><br><span class="line">print(students.values())    <span class="comment"># dict_values([&#123;...&#125;, &#123;...&#125;, &#123;...&#125;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中所有的键值对</span></span><br><span class="line">print(students.items())     <span class="comment"># dict_items([(1001, &#123;...&#125;), (1002, &#123;....&#125;), (1003, &#123;...&#125;)])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典中所有的键值对进行循环遍历</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> students.items():</span><br><span class="line">    print(key, <span class="string">&#x27;---&gt;&#x27;</span>, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pop方法通过键删除对应的键值对并返回该值</span></span><br><span class="line">stu1 = students.pop(<span class="number">1002</span>)</span><br><span class="line">print(stu1)             <span class="comment"># &#123;&#x27;name&#x27;: &#x27;白元芳&#x27;, &#x27;sex&#x27;: True, &#x27;age&#x27;: 23, &#x27;place&#x27;: &#x27;河北保定&#x27;&#125;</span></span><br><span class="line">print(<span class="built_in">len</span>(students))    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果取不到会引发KeyError异常，可以指定默认值</span></span><br><span class="line"><span class="comment"># stu2 = students.pop(1005)    # KeyError: 1005</span></span><br><span class="line">stu2 = students.pop(<span class="number">1005</span>, &#123;&#125;)</span><br><span class="line">print(stu2)             <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用popitem方法删除字典中最后一组键值对并返回对应的二元组</span></span><br><span class="line"><span class="comment"># 如果字典中没有元素，调用该方法将引发KeyError异常</span></span><br><span class="line">key, value = students.popitem()</span><br><span class="line">print(key, value)    <span class="comment"># 1003 &#123;&#x27;name&#x27;: &#x27;武则天&#x27;, &#x27;sex&#x27;: False, &#x27;age&#x27;: 20, &#x27;place&#x27;: &#x27;四川广元&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault可以更新字典中的键对应的值或向字典中存入新的键值对</span></span><br><span class="line"><span class="comment"># setdefault方法的第一个参数是键，第二个参数是键对应的值</span></span><br><span class="line"><span class="comment"># 如果这个键在字典中存在，更新这个键之后会返回原来与这个键对应的值</span></span><br><span class="line"><span class="comment"># 如果这个键在字典中不存在，方法将返回第二个参数的值，默认为None</span></span><br><span class="line">result = students.setdefault(<span class="number">1005</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李世民&#x27;</span><span class="string">&#x27;, &#x27;</span>sex<span class="string">&#x27;: True&#125;)</span></span><br><span class="line"><span class="string">print(result)        # &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>方启鹤<span class="string">&#x27;, &#x27;</span>sex<span class="string">&#x27;: True&#125;</span></span><br><span class="line"><span class="string">print(students)      # &#123;1001: &#123;...&#125;, 1005: &#123;...&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用update更新字典元素，相同的键会用新值覆盖掉旧值，不同的键会添加到字典中</span></span><br><span class="line"><span class="string">others = &#123;</span></span><br><span class="line"><span class="string">    1005: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>乔峰<span class="string">&#x27;, &#x27;</span>sex<span class="string">&#x27;: True, &#x27;</span>age<span class="string">&#x27;: 32, &#x27;</span>place<span class="string">&#x27;: &#x27;</span>北京大兴<span class="string">&#x27;&#125;,</span></span><br><span class="line"><span class="string">    1010: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>王语嫣<span class="string">&#x27;, &#x27;</span>sex<span class="string">&#x27;: False, &#x27;</span>age<span class="string">&#x27;: 19&#125;,</span></span><br><span class="line"><span class="string">    1008: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>钟灵<span class="string">&#x27;, &#x27;</span>sex<span class="string">&#x27;: False&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">students.update(others)</span></span><br><span class="line"><span class="string">print(students)      # &#123;1001: &#123;...&#125;, 1005: &#123;...&#125;, 1010: &#123;...&#125;, 1008: &#123;...&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>跟列表一样，从字典中删除元素也可以使用<code>del</code>关键字，在删除元素的时候如果指定的键索引不到对应的值，一样会引发<code>KeyError</code>异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> person[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础(四):集合</title>
    <url>/2021/03/17/17-26-32/</url>
    <content><![CDATA[<div class="note warning"><p>Python基础(四):集合 </p>
</div>

<span id="more"></span>

<p>集合中的各个事物通常称为集合的元素。集合应该满足以下特性：</p>
<ol>
<li><strong>无序性</strong>：一个集合中，每个元素的地位都是相同的，元素之间是无序的。<strong>集合肯定不能够支持索引运算</strong></li>
<li><strong>互异性</strong>：一个集合中，任何两个元素都认为是不相同的，即每个元素只能出现一次。<strong>集合中不能有重复元素</strong></li>
<li><strong>确定性</strong>：给定一个集合，任给一个元素，该元素或者属于或者不属于该集合，二者必居其一，不允许有模棱两可的情况出现。支持<code>in</code>和<code>not in</code>成员运算，<strong>集合的成员运算在性能上要优于列表的成员运算</strong></li>
</ol>
<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>在Python中，创建集合可以使用<code>&#123;&#125;</code>字面量语法，<code>&#123;&#125;</code>中需要至少有一个元素，因为没有元素的<code>&#123;&#125;</code>并不是空集合而是一个空字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建集合的字面量语法(重复元素不会出现在集合中)</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(set1)         <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">print(<span class="built_in">len</span>(set1))    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合的构造器语法</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">print(set2)         <span class="comment"># &#123;&#x27;h&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;e&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 将列表转换成集合(可以去掉列表中的重复元素)</span></span><br><span class="line">set3 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">print(set3)         <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合的生成式语法(将列表生成式的[]换成&#123;&#125;)</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(set4)         <span class="comment"># &#123;3, 5, 6, 9, 10, 12, 15, 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素的循环遍历</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> set4:</span><br><span class="line">    print(elem)</span><br></pre></td></tr></table></figure>

<p>集合中的元素必须是<code>hashable</code>类型。通常不可变类型都是<code>hashable</code>类型，如整数、浮点、字符串、元组等，而可变类型都不是<code>hashable</code>类型，因为可变类型无法确定唯一的ID值，所以也就不能放到集合中。集合本身也是可变类型，所以集合不能够作为集合中的元素</p>
<h2 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h2><h3 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h3><p>可以通过成员运算<code>in</code>和<code>not in </code>检查元素是否在集合中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;</span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> set1)        <span class="comment"># False </span></span><br><span class="line">print(<span class="number">15</span> <span class="keyword">in</span> set1)        <span class="comment"># True</span></span><br><span class="line">set2 = &#123;<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>&#125;</span><br><span class="line">print(<span class="string">&#x27;Ruby&#x27;</span> <span class="keyword">in</span> set2)    <span class="comment"># False</span></span><br><span class="line">print(<span class="string">&#x27;Java&#x27;</span> <span class="keyword">in</span> set2)    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="交并差运算"><a href="#交并差运算" class="headerlink" title="交并差运算"></a>交并差运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 &amp; 运算符</span></span><br><span class="line">print(set1 &amp; set2)                <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用intersection方法</span></span><br><span class="line">print(set1.intersection(set2))    <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 | 运算符</span></span><br><span class="line">print(set1 | set2)         <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用union方法</span></span><br><span class="line">print(set1.union(set2))    <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="comment"># 方法一: 使用 - 运算符</span></span><br><span class="line">print(set1 - set2)              <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用difference方法</span></span><br><span class="line">print(set1.difference(set2))    <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差</span></span><br><span class="line"><span class="comment"># 方法一: 使用 ^ 运算符</span></span><br><span class="line">print(set1 ^ set2)                        <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法二: 使用symmetric_difference方法</span></span><br><span class="line">print(set1.symmetric_difference(set2))    <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment"># 方法三: 对称差相当于两个集合的并集减去交集</span></span><br><span class="line">print((set1 | set2) - (set1 &amp; set2))      <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br></pre></td></tr></table></figure>

<p>集合的交集、并集、差集运算还可以跟赋值运算一起构成复合运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment"># 将set1和set2求并集再赋值给set1</span></span><br><span class="line"><span class="comment"># 也可以通过set1.update(set2)来实现</span></span><br><span class="line">set1 |= set2</span><br><span class="line">print(set1)    <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br><span class="line">set3 = &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment"># 将set1和set3求交集再赋值给set1</span></span><br><span class="line"><span class="comment"># 也可以通过set1.intersection_update(set3)来实现</span></span><br><span class="line">set1 &amp;= set3</span><br><span class="line">print(set1)    <span class="comment"># &#123;3, 6&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h2><p>两个集合可以用<code>==</code>和<code>!=</code>进行相等性判断，如果两个集合中的元素完全相同，那么<code>==</code>比较的结果就是<code>True</code>，否则就是<code>False</code>。如果集合A的任意一个元素都是集合B的元素，那么集合A称为集合B的子集，即对于∀a∈A，均有a∈B，则A⊆B。A是B的子集，反过来也可以称B是A的超集。如果A是B的子集且A不等于B，那么A就是B的真子集。Python为集合类型提供了判断子集和超集的运算符，其实就是<code>&lt;</code>和<code>&gt;</code>运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set3 = set2</span><br><span class="line"><span class="comment"># &lt;运算符表示真子集，&lt;=运算符表示子集</span></span><br><span class="line">print(set1 &lt; set2, set1 &lt;= set2)    <span class="comment"># True True</span></span><br><span class="line">print(set2 &lt; set3, set2 &lt;= set3)    <span class="comment"># False True</span></span><br><span class="line"><span class="comment"># 通过issubset方法也能进行子集判断</span></span><br><span class="line">print(set1.issubset(set2))      <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反过来可以用issuperset或&gt;运算符进行超集判断</span></span><br><span class="line">print(set2.issuperset(set1))    <span class="comment"># True</span></span><br><span class="line">print(set2 &gt; set1)              <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="集合的方法"><a href="#集合的方法" class="headerlink" title="集合的方法"></a>集合的方法</h2><p>Python中的集合是<strong>可变类型</strong>，我们可以通过集合类型的方法为集合添加或删除元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空集合</span></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 通过add方法添加元素</span></span><br><span class="line">set1.add(<span class="number">33</span>)</span><br><span class="line">set1.add(<span class="number">55</span>)</span><br><span class="line">set1.update(&#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>&#125;)</span><br><span class="line">print(set1)    <span class="comment"># &#123;33, 1, 100, 55, 1000, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过discard方法删除指定元素</span></span><br><span class="line">set1.discard(<span class="number">100</span>)</span><br><span class="line">set1.discard(<span class="number">99</span>)</span><br><span class="line">print(set1)    <span class="comment"># &#123;1, 10, 33, 55, 1000&#125;</span></span><br><span class="line"><span class="comment"># 通过remove方法删除指定元素，建议先做成员运算再删除</span></span><br><span class="line"><span class="comment"># 否则元素如果不在集合中就会引发KeyError异常</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">10</span> <span class="keyword">in</span> set1:</span><br><span class="line">    set1.remove(<span class="number">10</span>)</span><br><span class="line">print(set1)    <span class="comment"># &#123;33, 1, 55, 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop方法可以从集合中随机删除一个元素并返回该元素</span></span><br><span class="line">print(set1.pop())</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear方法可以清空整个集合</span></span><br><span class="line">set1.clear()</span><br><span class="line">print(set1)    <span class="comment"># set()</span></span><br></pre></td></tr></table></figure>

<p>如果要判断两个集合有没有相同的元素可以使用<code>isdisjoint</code>方法，没有相同元素返回<code>True</code>，否则返回<code>False</code>，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;Kotlin&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Objective-C&#x27;</span>, <span class="string">&#x27;Dart&#x27;</span>&#125;</span><br><span class="line">set3 = &#123;<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>&#125;</span><br><span class="line">print(set1.isdisjoint(set2))    <span class="comment"># False</span></span><br><span class="line">print(set1.isdisjoint(set3))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><p>Python中还有一种不可变类型的集合，名字叫<code>frozenset</code>。<code>set</code>跟<code>frozenset</code>的区别就如同<code>list</code>跟<code>tuple</code>的区别，<code>frozenset</code>由于是不可变类型，能够计算出哈希码，因此它可以作为<code>set</code>中的元素。除了不能添加和删除元素，<code>frozenset</code>在其他方面跟<code>set</code>基本是一样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;)</span><br><span class="line">set2 = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">print(set1 &amp; set2)    <span class="comment"># frozenset(&#123;1, 3, 5&#125;)</span></span><br><span class="line">print(set1 | set2)    <span class="comment"># frozenset(&#123;1, 2, 3, 4, 5, 7&#125;)</span></span><br><span class="line">print(set1 - set2)    <span class="comment"># frozenset(&#123;7&#125;)</span></span><br><span class="line">print(set1 &lt; set2)    <span class="comment"># False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2 + Oh My Zsh改造终端记录</title>
    <url>/2021/03/12/17-21-07/</url>
    <content><![CDATA[<div class="note success"><p>iTerm2 + Oh My Zsh </p>
</div>

<span id="more"></span>

<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><h3 id="Homebrew是什么？"><a href="#Homebrew是什么？" class="headerlink" title="Homebrew是什么？"></a>Homebrew是什么？</h3><blockquote>
<p>Homebrew是Mac OS 不可或缺的套件管理器。</p>
</blockquote>
<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>
<h3 id="Homebrew的安装方法"><a href="#Homebrew的安装方法" class="headerlink" title="Homebrew的安装方法"></a>Homebrew的安装方法</h3><ol>
<li>官方的安装方法，将以下命令粘贴到终端</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>因为网络问题，推荐采用国内地址的自动脚本进行安装，且自动更换至国内镜像</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Homebrew如何使用"><a href="#Homebrew如何使用" class="headerlink" title="Homebrew如何使用"></a>Homebrew如何使用</h3><p>知道软件包具体名称，直接 <code>brew install 软件包名</code> 只知道一小部分名称，用 <code>brew search 小部分名称</code> 查询即可 例如<code>brew search chrome</code>就会把带chrome的软件包全部列出</p>
<h3 id="Homebrew中的扩展cask如何使用"><a href="#Homebrew中的扩展cask如何使用" class="headerlink" title="Homebrew中的扩展cask如何使用"></a>Homebrew中的扩展cask如何使用</h3><p>假设安装firefox：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install --cask firefox</span><br></pre></td></tr></table></figure>

<h2 id="iTerm2安装与配置"><a href="#iTerm2安装与配置" class="headerlink" title="iTerm2安装与配置"></a>iTerm2安装与配置</h2><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ol>
<li><p>官网下载，<a href="https://iterm2.com/">iTerm2</a></p>
</li>
<li><p>使用Homebrew进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置iTerm2"><a href="#配置iTerm2" class="headerlink" title="配置iTerm2"></a>配置iTerm2</h3><ol>
<li><p>将iTerm2设置为默认终端，<code>iTerm2 -&gt; Make iTerm2 Default Term</code></p>
</li>
<li><p>更改配色方案，个人最喜欢的配色方案是solarized</p>
<ul>
<li>除了默认主题，更多主题可以通过主题面板<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">https://github.com/mbadolato/iTerm2-Color-Schemes</a>，或者<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">https://github.com/mbadolato/iTerm2-Color-Schemes</a>下载压缩包</li>
<li><code>preference-&gt;profiles-&gt;colors-&gt;color presets-&gt;import</code></li>
</ul>
</li>
<li><p>安装PowerFonts</p>
<ul>
<li>安装字体库需要首先将项目git clone至本地，然后执行源码中的install.sh</li>
<li>在任意位置执行：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span></span></span><br><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> install</span></span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> clean-up a bit</span></span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure>

<ul>
<li>设置字体，<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text</code>，推荐Meslo LG字体</li>
</ul>
</li>
</ol>
<h2 id="Oh-my-zsh的安装与配置"><a href="#Oh-my-zsh的安装与配置" class="headerlink" title="Oh my zsh的安装与配置"></a>Oh my zsh的安装与配置</h2><h3 id="安装方法-1"><a href="#安装方法-1" class="headerlink" title="安装方法"></a>安装方法</h3><ol>
<li><p>自动化安装官方提供了两种方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>同样的，因为网络问题，可能会导致安装很慢，甚至失败，推荐采用以下的方式手动安装</p>
<ol>
<li><p>把 oh-my-zsh 项目 Clone 下来：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure></li>
<li><p>备份之前的zsh配置文件（如果有的话）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个新的zsh配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></li>
<li><p>更改默认的Shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h3><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>oh-my-zsh自带了很多主题，在~/.oh-my-zsh/themes目录下可以查看，更多的主题选择<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p>
<ol>
<li><p>打开zshrc配置文件，将ZSH_THEME后面的字段改为所选主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>设置参数<code>ZSH_THEME=agnoster</code></p>
</li>
<li><p>更新配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>由于选择了agnoster主题，还需要安装PowerLine，Powerline是agnoster主题的依赖</p>
<ul>
<li><p>安装Powerline：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install powerline-status --user</span><br></pre></td></tr></table></figure>

<p>没有安装pip可能会碰到<code>zsh: command not found: pip</code></p>
<p>使用命令安装即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul>
<li><p>安装高亮插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li>
<li><p>安装命令建议和补全</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li>
<li><p>编辑配置文件<code>vi ~/.zshrc</code>，定位至<code>plugins=( [plugins...])</code>进行添加</p>
<ul>
<li>请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个</li>
</ul>
</li>
<li><p>更新配置文件<code>source ~/.zshrc</code></p>
</li>
<li><p>更多插件，插件的目录有两个：</p>
<ul>
<li>/Users/user/.oh-my-zsh/plugins: oh-my-zsh 官方插件目录，该目录已经预装了很多实用的插件，只不过没激活而已</li>
<li>/Users/user/.oh-my-zsh/custom/plugins: oh-my-zsh 第三方插件目录<br>安装插件只需要把插件下载到上面任何一个目录，然后在.zshrc文件的plugins变量中添加对应插件的名称即可</li>
</ul>
</li>
</ul>
<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ul>
<li>路径前缀太长：在<code>~/.oh-my-zsh/themes</code>路径下找到<code>agnoster.zsh-theme</code>文件，可使用文本工具打开，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉</li>
<li>打印很多警告，将<code>ZSH_DISABLE_COMPFIX=&quot;true&quot;</code>加入<code>~/.zshrc</code>文件中并重新启动zsh</li>
</ul>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币：数字货币</title>
    <url>/2021/03/12/11-30-16/</url>
    <content><![CDATA[<h2 id="去中心化电子记账系统"><a href="#去中心化电子记账系统" class="headerlink" title="去中心化电子记账系统"></a>去中心化电子记账系统</h2><ol>
<li>以谁的账单为准</li>
<li>为何要记账</li>
<li>如何防伪（交易记录是否为真、重复交易是否存在等）</li>
<li>如何防止双重支付</li>
<li>如何保护个人信息</li>
</ol>
<span id="more"></span>

<h2 id="Q1-为何要记账？"><a href="#Q1-为何要记账？" class="headerlink" title="Q1 为何要记账？"></a>Q1 为何要记账？</h2><p>记账的奖励：</p>
<ol>
<li>手续费</li>
<li>打包奖励</li>
</ol>
<h2 id="Q2-以谁的账单为准"><a href="#Q2-以谁的账单为准" class="headerlink" title="Q2 以谁的账单为准"></a>Q2 以谁的账单为准</h2><p>工作量证明：每一个参与的用户都要去做一个很难的数学题，以获取打包权，即挖矿。</p>
<h3 id="挖坑原理"><a href="#挖坑原理" class="headerlink" title="挖坑原理"></a>挖坑原理</h3><ol>
<li>哈希函数（正向容易，反向困难）</li>
<li>原理：<ol>
<li>字符串：前块头部+账单+时间戳+<strong>随机数</strong></li>
<li>Hash = sha256(sha256(字符串))</li>
<li>前n位是0，通过改变随机数</li>
</ol>
</li>
<li>难度n的确定：2的n次幂接近于参与的用户的计算力在十分钟内的总和</li>
</ol>
<h2 id="Q3-身份验证"><a href="#Q3-身份验证" class="headerlink" title="Q3 身份验证"></a>Q3 身份验证</h2><h3 id="电子签名"><a href="#电子签名" class="headerlink" title="电子签名"></a>电子签名</h3><p>随机数 –&gt; 私钥 –&gt; 公钥 –&gt; 地址</p>
<ol>
<li>私钥是个人保密的</li>
<li>公钥与地址是公开的</li>
<li>通过私钥加密的信息可以由公钥进行解密，这种加密解密说用钥匙不一样的加密方式称之为<strong>非对称加密</strong>，常见的有RSA加密。<ol>
<li>用户a将一条支付记录通过Hash算法(sha256)形成摘要</li>
<li>摘要通过个人私钥进行加密形成密码</li>
<li>广播支付记录+公钥+密码</li>
<li>接受到这则广播的用户，对这条支付信息通过Hash算法(sha256)形成摘要m，同时根据公钥和密码进行解密形成摘要n。如果m=n，则这条记录真实且广播由a发出。如果m≠n，则可以认为这条记录和广播是伪造的</li>
</ol>
</li>
</ol>
<h2 id="Q5-双重支付问题"><a href="#Q5-双重支付问题" class="headerlink" title="Q5 双重支付问题"></a>Q5 双重支付问题</h2><h3 id="余额"><a href="#余额" class="headerlink" title="余额"></a>余额</h3><p>通过追溯检测机制</p>
<h3 id="如何防止双重支付"><a href="#如何防止双重支付" class="headerlink" title="如何防止双重支付"></a>如何防止双重支付</h3><p>接受到一条支付记录时，不能立即认为钱已经到账，需等到新块形成并上主链（由自己或其他人完成）</p>
<h2 id="Q6-防止篡改"><a href="#Q6-防止篡改" class="headerlink" title="Q6 防止篡改"></a>Q6 防止篡改</h2><h3 id="最长链原则"><a href="#最长链原则" class="headerlink" title="最长链原则"></a>最长链原则</h3><p>当同时产生两个主链的下一个新块时，以哪一块先产生下一个新块最准，即哪个新块能更早产生更长的链，普遍认为最长链是最有希望成为公认原则的</p>
<h3 id="如何防止篡改"><a href="#如何防止篡改" class="headerlink" title="如何防止篡改"></a>如何防止篡改</h3><p>理论上支持通过打包新块来改动，但在该新块的支链长度超过主链前，不被承认。当个人计算力超过主链上所有人的计算能力时，才有可能进行篡改。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>比特币</tag>
      </tags>
  </entry>
</search>
